%{
import os, json, string

def chunks(seq, size):
    # Yield successive chunks of list (for formatting output lines)
    return (seq[i:i+size] for i in range(0, len(seq), size))

def encode(string, cipher):
    # XOR-encode the given string using the cipher (salt) bytes
    data = string.encode('UTF-8')
    return [data[i] ^ cipher[i % len(cipher)] for i in range(len(data))]

def to_camel_case(s):
    # Convert keys like "MY_SECRET_KEY" or "my_secret_key" to Swift camelCase (e.g. "mySecretKey")
    if not s: 
        return s
    parts = s.split('_')
    # Lowercase the first part, Title-case the subsequent parts, and join
    return parts[0].lower() + ''.join(p.title() for p in parts[1:])
}%
// !!! This file is generated by GYB â€“ do not edit directly !!!
enum Secrets {
    // A random salt (key) for XOR cipher, different each build for security
    private static let salt: [UInt8] = [
        %{ salt = os.urandom(64) }%
        % for chunk in chunks(list(salt), 8):
        ${", ".join(f"0x{b:02x}" for b in chunk)},
        % end
    ]

    // Decoding function: XORs each byte of the encoded data with the salt
    private static func decode(_ encoded: [UInt8], using cipher: [UInt8]) -> String {
        let decodedBytes = encoded.enumerated().map { (offset, byte) in
            byte ^ cipher[offset % cipher.count]
        }
        return String(decoding: decodedBytes, as: UTF8.self)
    }

    % with open(os.path.join(os.path.dirname(__file__), 'secrets.json')) as f:
    %     secrets = json.load(f)
    % for key, value in secrets.items():
    %     if isinstance(value, str):
    static var ${to_camel_case(key)}: String {
        let encoded: [UInt8] = [
            % for chunk in chunks(encode(value, salt), 8):
            ${", ".join(f"0x{b:02x}" for b in chunk)},
            % end
        ]
        return decode(encoded, using: salt)
    }
    %     else:
    %         print(f"Warning: Secret '{key}' has a non-string value and was skipped.")
    %     end
    % end
}